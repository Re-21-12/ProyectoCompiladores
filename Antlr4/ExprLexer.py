# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,352,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,41,3,41,266,8,41,1,41,4,41,269,8,41,11,
        41,12,41,270,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,3,42,287,8,42,1,43,1,43,5,43,291,8,43,10,43,12,
        43,294,9,43,1,43,1,43,1,44,1,44,5,44,300,8,44,10,44,12,44,303,9,
        44,1,45,4,45,306,8,45,11,45,12,45,307,1,45,1,45,4,45,312,8,45,11,
        45,12,45,313,1,46,4,46,317,8,46,11,46,12,46,318,1,46,1,46,1,47,1,
        47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,332,8,48,10,48,12,48,
        335,9,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,343,8,49,10,49,12,49,
        346,9,49,1,49,1,49,1,49,1,49,1,49,1,344,0,50,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
        50,1,0,6,1,0,48,57,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,361,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,
        0,3,108,1,0,0,0,5,113,1,0,0,0,7,115,1,0,0,0,9,123,1,0,0,0,11,128,
        1,0,0,0,13,135,1,0,0,0,15,143,1,0,0,0,17,150,1,0,0,0,19,155,1,0,
        0,0,21,157,1,0,0,0,23,159,1,0,0,0,25,161,1,0,0,0,27,163,1,0,0,0,
        29,165,1,0,0,0,31,167,1,0,0,0,33,169,1,0,0,0,35,171,1,0,0,0,37,173,
        1,0,0,0,39,175,1,0,0,0,41,177,1,0,0,0,43,179,1,0,0,0,45,181,1,0,
        0,0,47,184,1,0,0,0,49,187,1,0,0,0,51,190,1,0,0,0,53,193,1,0,0,0,
        55,196,1,0,0,0,57,199,1,0,0,0,59,201,1,0,0,0,61,203,1,0,0,0,63,208,
        1,0,0,0,65,216,1,0,0,0,67,224,1,0,0,0,69,227,1,0,0,0,71,235,1,0,
        0,0,73,240,1,0,0,0,75,246,1,0,0,0,77,250,1,0,0,0,79,258,1,0,0,0,
        81,261,1,0,0,0,83,265,1,0,0,0,85,286,1,0,0,0,87,288,1,0,0,0,89,297,
        1,0,0,0,91,305,1,0,0,0,93,316,1,0,0,0,95,322,1,0,0,0,97,327,1,0,
        0,0,99,338,1,0,0,0,101,102,5,115,0,0,102,103,5,119,0,0,103,104,5,
        105,0,0,104,105,5,116,0,0,105,106,5,99,0,0,106,107,5,104,0,0,107,
        2,1,0,0,0,108,109,5,99,0,0,109,110,5,97,0,0,110,111,5,115,0,0,111,
        112,5,101,0,0,112,4,1,0,0,0,113,114,5,58,0,0,114,6,1,0,0,0,115,116,
        5,100,0,0,116,117,5,101,0,0,117,118,5,102,0,0,118,119,5,97,0,0,119,
        120,5,117,0,0,120,121,5,108,0,0,121,122,5,116,0,0,122,8,1,0,0,0,
        123,124,5,118,0,0,124,125,5,111,0,0,125,126,5,105,0,0,126,127,5,
        100,0,0,127,10,1,0,0,0,128,129,5,101,0,0,129,130,5,110,0,0,130,131,
        5,116,0,0,131,132,5,101,0,0,132,133,5,114,0,0,133,134,5,111,0,0,
        134,12,1,0,0,0,135,136,5,100,0,0,136,137,5,101,0,0,137,138,5,99,
        0,0,138,139,5,105,0,0,139,140,5,109,0,0,140,141,5,97,0,0,141,142,
        5,108,0,0,142,14,1,0,0,0,143,144,5,99,0,0,144,145,5,97,0,0,145,146,
        5,100,0,0,146,147,5,101,0,0,147,148,5,110,0,0,148,149,5,97,0,0,149,
        16,1,0,0,0,150,151,5,98,0,0,151,152,5,111,0,0,152,153,5,111,0,0,
        153,154,5,108,0,0,154,18,1,0,0,0,155,156,5,61,0,0,156,20,1,0,0,0,
        157,158,5,40,0,0,158,22,1,0,0,0,159,160,5,41,0,0,160,24,1,0,0,0,
        161,162,5,123,0,0,162,26,1,0,0,0,163,164,5,125,0,0,164,28,1,0,0,
        0,165,166,5,43,0,0,166,30,1,0,0,0,167,168,5,45,0,0,168,32,1,0,0,
        0,169,170,5,42,0,0,170,34,1,0,0,0,171,172,5,47,0,0,172,36,1,0,0,
        0,173,174,5,37,0,0,174,38,1,0,0,0,175,176,5,94,0,0,176,40,1,0,0,
        0,177,178,5,60,0,0,178,42,1,0,0,0,179,180,5,62,0,0,180,44,1,0,0,
        0,181,182,5,60,0,0,182,183,5,61,0,0,183,46,1,0,0,0,184,185,5,62,
        0,0,185,186,5,61,0,0,186,48,1,0,0,0,187,188,5,61,0,0,188,189,5,61,
        0,0,189,50,1,0,0,0,190,191,5,33,0,0,191,192,5,61,0,0,192,52,1,0,
        0,0,193,194,5,43,0,0,194,195,5,43,0,0,195,54,1,0,0,0,196,197,5,45,
        0,0,197,198,5,45,0,0,198,56,1,0,0,0,199,200,5,44,0,0,200,58,1,0,
        0,0,201,202,5,59,0,0,202,60,1,0,0,0,203,204,5,104,0,0,204,205,5,
        111,0,0,205,206,5,108,0,0,206,207,5,97,0,0,207,62,1,0,0,0,208,209,
        5,102,0,0,209,210,5,117,0,0,210,211,5,110,0,0,211,212,5,99,0,0,212,
        213,5,105,0,0,213,214,5,111,0,0,214,215,5,110,0,0,215,64,1,0,0,0,
        216,217,5,114,0,0,217,218,5,101,0,0,218,219,5,116,0,0,219,220,5,
        111,0,0,220,221,5,114,0,0,221,222,5,110,0,0,222,223,5,97,0,0,223,
        66,1,0,0,0,224,225,5,105,0,0,225,226,5,102,0,0,226,68,1,0,0,0,227,
        228,5,101,0,0,228,229,5,108,0,0,229,230,5,115,0,0,230,231,5,101,
        0,0,231,232,5,32,0,0,232,233,5,105,0,0,233,234,5,102,0,0,234,70,
        1,0,0,0,235,236,5,101,0,0,236,237,5,108,0,0,237,238,5,115,0,0,238,
        239,5,101,0,0,239,72,1,0,0,0,240,241,5,119,0,0,241,242,5,104,0,0,
        242,243,5,105,0,0,243,244,5,108,0,0,244,245,5,101,0,0,245,74,1,0,
        0,0,246,247,5,102,0,0,247,248,5,111,0,0,248,249,5,114,0,0,249,76,
        1,0,0,0,250,251,5,109,0,0,251,252,5,111,0,0,252,253,5,115,0,0,253,
        254,5,116,0,0,254,255,5,114,0,0,255,256,5,97,0,0,256,257,5,114,0,
        0,257,78,1,0,0,0,258,259,5,38,0,0,259,260,5,38,0,0,260,80,1,0,0,
        0,261,262,5,124,0,0,262,263,5,124,0,0,263,82,1,0,0,0,264,266,5,45,
        0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,269,7,0,
        0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,
        0,0,271,84,1,0,0,0,272,273,5,118,0,0,273,274,5,101,0,0,274,275,5,
        114,0,0,275,276,5,100,0,0,276,277,5,97,0,0,277,278,5,100,0,0,278,
        279,5,101,0,0,279,280,5,114,0,0,280,287,5,111,0,0,281,282,5,102,
        0,0,282,283,5,97,0,0,283,284,5,108,0,0,284,285,5,115,0,0,285,287,
        5,111,0,0,286,272,1,0,0,0,286,281,1,0,0,0,287,86,1,0,0,0,288,292,
        5,34,0,0,289,291,8,1,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,
        1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,
        5,34,0,0,296,88,1,0,0,0,297,301,7,2,0,0,298,300,7,3,0,0,299,298,
        1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,90,1,
        0,0,0,303,301,1,0,0,0,304,306,7,0,0,0,305,304,1,0,0,0,306,307,1,
        0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,311,5,
        46,0,0,310,312,7,0,0,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,
        0,0,0,313,314,1,0,0,0,314,92,1,0,0,0,315,317,7,4,0,0,316,315,1,0,
        0,0,317,318,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,320,1,0,
        0,0,320,321,6,46,0,0,321,94,1,0,0,0,322,323,5,114,0,0,323,324,5,
        97,0,0,324,325,5,105,0,0,325,326,5,122,0,0,326,96,1,0,0,0,327,328,
        5,47,0,0,328,329,5,47,0,0,329,333,1,0,0,0,330,332,8,5,0,0,331,330,
        1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,
        1,0,0,0,335,333,1,0,0,0,336,337,6,48,0,0,337,98,1,0,0,0,338,339,
        5,47,0,0,339,340,5,42,0,0,340,344,1,0,0,0,341,343,9,0,0,0,342,341,
        1,0,0,0,343,346,1,0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,347,
        1,0,0,0,346,344,1,0,0,0,347,348,5,42,0,0,348,349,5,47,0,0,349,350,
        1,0,0,0,350,351,6,49,0,0,351,100,1,0,0,0,11,0,265,270,286,292,301,
        307,313,318,333,344,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    TIPO_VOID = 5
    TIPO_ENTERO = 6
    TIPO_DECIMAL = 7
    TIPO_CADENA = 8
    TIPO_BOOLEANO = 9
    ASIGNACION = 10
    PARENTESIS_INICIAL = 11
    PARENTESIS_FINAL = 12
    LLAVES_INICIAL = 13
    LLAVES_FINAL = 14
    MAS = 15
    MENOS = 16
    MULTIPLICACION = 17
    DIVISION = 18
    MODULO = 19
    POTENCIA = 20
    MENOR_QUE = 21
    MAYOR_QUE = 22
    MENOR_IGUAL_QUE = 23
    MAYOR_IGUAL_QUE = 24
    IGUAL = 25
    DIFERENTE = 26
    MASMAS = 27
    MENOSMENOS = 28
    COMA = 29
    PUNTO_Y_COMA = 30
    MAIN = 31
    FUNCION = 32
    RETURN = 33
    IF = 34
    ELSE_IF = 35
    ELSE = 36
    WHILE = 37
    FOR = 38
    MOSTRAR = 39
    AND = 40
    OR = 41
    NUMERO = 42
    BOOLEANO = 43
    CADENA = 44
    VARIABLE = 45
    DECIMAL = 46
    SIN_ESPACIO = 47
    RAIZ = 48
    COMENTARIO_LINEA = 49
    COMENTARIO_BLOQUE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'switch'", "'case'", "':'", "'default'", "'void'", "'entero'", 
            "'decimal'", "'cadena'", "'bool'", "'='", "'('", "')'", "'{'", 
            "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'<'", "'>'", 
            "'<='", "'>='", "'=='", "'!='", "'++'", "'--'", "','", "';'", 
            "'hola'", "'funcion'", "'retorna'", "'if'", "'else if'", "'else'", 
            "'while'", "'for'", "'mostrar'", "'&&'", "'||'", "'raiz'" ]

    symbolicNames = [ "<INVALID>",
            "TIPO_VOID", "TIPO_ENTERO", "TIPO_DECIMAL", "TIPO_CADENA", "TIPO_BOOLEANO", 
            "ASIGNACION", "PARENTESIS_INICIAL", "PARENTESIS_FINAL", "LLAVES_INICIAL", 
            "LLAVES_FINAL", "MAS", "MENOS", "MULTIPLICACION", "DIVISION", 
            "MODULO", "POTENCIA", "MENOR_QUE", "MAYOR_QUE", "MENOR_IGUAL_QUE", 
            "MAYOR_IGUAL_QUE", "IGUAL", "DIFERENTE", "MASMAS", "MENOSMENOS", 
            "COMA", "PUNTO_Y_COMA", "MAIN", "FUNCION", "RETURN", "IF", "ELSE_IF", 
            "ELSE", "WHILE", "FOR", "MOSTRAR", "AND", "OR", "NUMERO", "BOOLEANO", 
            "CADENA", "VARIABLE", "DECIMAL", "SIN_ESPACIO", "RAIZ", "COMENTARIO_LINEA", 
            "COMENTARIO_BLOQUE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "TIPO_VOID", "TIPO_ENTERO", 
                  "TIPO_DECIMAL", "TIPO_CADENA", "TIPO_BOOLEANO", "ASIGNACION", 
                  "PARENTESIS_INICIAL", "PARENTESIS_FINAL", "LLAVES_INICIAL", 
                  "LLAVES_FINAL", "MAS", "MENOS", "MULTIPLICACION", "DIVISION", 
                  "MODULO", "POTENCIA", "MENOR_QUE", "MAYOR_QUE", "MENOR_IGUAL_QUE", 
                  "MAYOR_IGUAL_QUE", "IGUAL", "DIFERENTE", "MASMAS", "MENOSMENOS", 
                  "COMA", "PUNTO_Y_COMA", "MAIN", "FUNCION", "RETURN", "IF", 
                  "ELSE_IF", "ELSE", "WHILE", "FOR", "MOSTRAR", "AND", "OR", 
                  "NUMERO", "BOOLEANO", "CADENA", "VARIABLE", "DECIMAL", 
                  "SIN_ESPACIO", "RAIZ", "COMENTARIO_LINEA", "COMENTARIO_BLOQUE" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


