# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,182,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,4,26,154,
        8,26,11,26,12,26,155,1,27,1,27,5,27,160,8,27,10,27,12,27,163,9,27,
        1,28,4,28,166,8,28,11,28,12,28,167,1,28,1,28,4,28,172,8,28,11,28,
        12,28,173,1,29,4,29,177,8,29,11,29,12,29,178,1,29,1,29,0,0,30,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,1,0,4,1,0,48,57,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,186,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,
        0,0,3,64,1,0,0,0,5,72,1,0,0,0,7,77,1,0,0,0,9,83,1,0,0,0,11,87,1,
        0,0,0,13,95,1,0,0,0,15,102,1,0,0,0,17,110,1,0,0,0,19,112,1,0,0,0,
        21,114,1,0,0,0,23,116,1,0,0,0,25,118,1,0,0,0,27,120,1,0,0,0,29,122,
        1,0,0,0,31,124,1,0,0,0,33,126,1,0,0,0,35,128,1,0,0,0,37,130,1,0,
        0,0,39,132,1,0,0,0,41,135,1,0,0,0,43,138,1,0,0,0,45,141,1,0,0,0,
        47,144,1,0,0,0,49,147,1,0,0,0,51,150,1,0,0,0,53,153,1,0,0,0,55,157,
        1,0,0,0,57,165,1,0,0,0,59,176,1,0,0,0,61,62,5,105,0,0,62,63,5,102,
        0,0,63,2,1,0,0,0,64,65,5,101,0,0,65,66,5,108,0,0,66,67,5,115,0,0,
        67,68,5,101,0,0,68,69,5,32,0,0,69,70,5,105,0,0,70,71,5,102,0,0,71,
        4,1,0,0,0,72,73,5,101,0,0,73,74,5,108,0,0,74,75,5,115,0,0,75,76,
        5,101,0,0,76,6,1,0,0,0,77,78,5,119,0,0,78,79,5,104,0,0,79,80,5,105,
        0,0,80,81,5,108,0,0,81,82,5,101,0,0,82,8,1,0,0,0,83,84,5,102,0,0,
        84,85,5,111,0,0,85,86,5,114,0,0,86,10,1,0,0,0,87,88,5,109,0,0,88,
        89,5,111,0,0,89,90,5,115,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,
        93,5,97,0,0,93,94,5,114,0,0,94,12,1,0,0,0,95,96,5,101,0,0,96,97,
        5,110,0,0,97,98,5,116,0,0,98,99,5,101,0,0,99,100,5,114,0,0,100,101,
        5,111,0,0,101,14,1,0,0,0,102,103,5,100,0,0,103,104,5,101,0,0,104,
        105,5,99,0,0,105,106,5,105,0,0,106,107,5,109,0,0,107,108,5,97,0,
        0,108,109,5,108,0,0,109,16,1,0,0,0,110,111,5,61,0,0,111,18,1,0,0,
        0,112,113,5,40,0,0,113,20,1,0,0,0,114,115,5,41,0,0,115,22,1,0,0,
        0,116,117,5,123,0,0,117,24,1,0,0,0,118,119,5,125,0,0,119,26,1,0,
        0,0,120,121,5,43,0,0,121,28,1,0,0,0,122,123,5,45,0,0,123,30,1,0,
        0,0,124,125,5,42,0,0,125,32,1,0,0,0,126,127,5,47,0,0,127,34,1,0,
        0,0,128,129,5,60,0,0,129,36,1,0,0,0,130,131,5,62,0,0,131,38,1,0,
        0,0,132,133,5,60,0,0,133,134,5,61,0,0,134,40,1,0,0,0,135,136,5,62,
        0,0,136,137,5,61,0,0,137,42,1,0,0,0,138,139,5,43,0,0,139,140,5,43,
        0,0,140,44,1,0,0,0,141,142,5,45,0,0,142,143,5,45,0,0,143,46,1,0,
        0,0,144,145,5,61,0,0,145,146,5,61,0,0,146,48,1,0,0,0,147,148,5,33,
        0,0,148,149,5,61,0,0,149,50,1,0,0,0,150,151,5,59,0,0,151,52,1,0,
        0,0,152,154,7,0,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,
        0,0,155,156,1,0,0,0,156,54,1,0,0,0,157,161,7,1,0,0,158,160,7,2,0,
        0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,
        0,162,56,1,0,0,0,163,161,1,0,0,0,164,166,7,0,0,0,165,164,1,0,0,0,
        166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,
        169,171,5,46,0,0,170,172,7,0,0,0,171,170,1,0,0,0,172,173,1,0,0,0,
        173,171,1,0,0,0,173,174,1,0,0,0,174,58,1,0,0,0,175,177,7,3,0,0,176,
        175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,
        180,1,0,0,0,180,181,6,29,0,0,181,60,1,0,0,0,6,0,155,161,167,173,
        178,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE_IF = 2
    ELSE = 3
    WHILE = 4
    FOR = 5
    MOSTRAR = 6
    TIPO_ENTERO = 7
    TIPO_DECIMAL = 8
    ASIGNACION = 9
    PARENTESIS_INICIAL = 10
    PARENTESIS_FINAL = 11
    LLAVES_INICIAL = 12
    LLAVES_FINAL = 13
    MAS = 14
    MENOS = 15
    MULTIPLICACION = 16
    DIVISION = 17
    MENOR_QUE = 18
    MAYOR_QUE = 19
    MENOR_IGUAL_QUE = 20
    MAYOR_IGUAL_QUE = 21
    MASMAS = 22
    MENOSMENOS = 23
    IGUAL = 24
    DIFERENTE = 25
    PUNTO_Y_COMA = 26
    NUMERO = 27
    VARIABLE = 28
    DECIMAL = 29
    SIN_ESPACIO = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else if'", "'else'", "'while'", "'for'", "'mostrar'", 
            "'entero'", "'decimal'", "'='", "'('", "')'", "'{'", "'}'", 
            "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", "'++'", 
            "'--'", "'=='", "'!='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE_IF", "ELSE", "WHILE", "FOR", "MOSTRAR", "TIPO_ENTERO", 
            "TIPO_DECIMAL", "ASIGNACION", "PARENTESIS_INICIAL", "PARENTESIS_FINAL", 
            "LLAVES_INICIAL", "LLAVES_FINAL", "MAS", "MENOS", "MULTIPLICACION", 
            "DIVISION", "MENOR_QUE", "MAYOR_QUE", "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", 
            "MASMAS", "MENOSMENOS", "IGUAL", "DIFERENTE", "PUNTO_Y_COMA", 
            "NUMERO", "VARIABLE", "DECIMAL", "SIN_ESPACIO" ]

    ruleNames = [ "IF", "ELSE_IF", "ELSE", "WHILE", "FOR", "MOSTRAR", "TIPO_ENTERO", 
                  "TIPO_DECIMAL", "ASIGNACION", "PARENTESIS_INICIAL", "PARENTESIS_FINAL", 
                  "LLAVES_INICIAL", "LLAVES_FINAL", "MAS", "MENOS", "MULTIPLICACION", 
                  "DIVISION", "MENOR_QUE", "MAYOR_QUE", "MENOR_IGUAL_QUE", 
                  "MAYOR_IGUAL_QUE", "MASMAS", "MENOSMENOS", "IGUAL", "DIFERENTE", 
                  "PUNTO_Y_COMA", "NUMERO", "VARIABLE", "DECIMAL", "SIN_ESPACIO" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


