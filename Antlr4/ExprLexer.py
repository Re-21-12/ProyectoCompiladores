# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,153,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,4,0,57,8,0,11,0,12,0,58,1,1,1,1,5,1,63,8,1,10,1,12,1,
        66,9,1,1,2,4,2,69,8,2,11,2,12,2,70,1,2,1,2,4,2,75,8,2,11,2,12,2,
        76,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
        4,26,148,8,26,11,26,12,26,149,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,157,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,56,1,0,0,0,3,
        60,1,0,0,0,5,68,1,0,0,0,7,78,1,0,0,0,9,80,1,0,0,0,11,83,1,0,0,0,
        13,88,1,0,0,0,15,94,1,0,0,0,17,98,1,0,0,0,19,100,1,0,0,0,21,102,
        1,0,0,0,23,104,1,0,0,0,25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,
        0,0,31,112,1,0,0,0,33,114,1,0,0,0,35,116,1,0,0,0,37,118,1,0,0,0,
        39,121,1,0,0,0,41,124,1,0,0,0,43,127,1,0,0,0,45,130,1,0,0,0,47,133,
        1,0,0,0,49,136,1,0,0,0,51,138,1,0,0,0,53,147,1,0,0,0,55,57,7,0,0,
        0,56,55,1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,2,1,
        0,0,0,60,64,7,1,0,0,61,63,7,2,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,
        62,1,0,0,0,64,65,1,0,0,0,65,4,1,0,0,0,66,64,1,0,0,0,67,69,7,0,0,
        0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,72,
        1,0,0,0,72,74,5,46,0,0,73,75,7,0,0,0,74,73,1,0,0,0,75,76,1,0,0,0,
        76,74,1,0,0,0,76,77,1,0,0,0,77,6,1,0,0,0,78,79,5,61,0,0,79,8,1,0,
        0,0,80,81,5,105,0,0,81,82,5,102,0,0,82,10,1,0,0,0,83,84,5,101,0,
        0,84,85,5,108,0,0,85,86,5,115,0,0,86,87,5,101,0,0,87,12,1,0,0,0,
        88,89,5,119,0,0,89,90,5,104,0,0,90,91,5,105,0,0,91,92,5,108,0,0,
        92,93,5,101,0,0,93,14,1,0,0,0,94,95,5,102,0,0,95,96,5,111,0,0,96,
        97,5,114,0,0,97,16,1,0,0,0,98,99,5,40,0,0,99,18,1,0,0,0,100,101,
        5,41,0,0,101,20,1,0,0,0,102,103,5,123,0,0,103,22,1,0,0,0,104,105,
        5,125,0,0,105,24,1,0,0,0,106,107,5,43,0,0,107,26,1,0,0,0,108,109,
        5,45,0,0,109,28,1,0,0,0,110,111,5,42,0,0,111,30,1,0,0,0,112,113,
        5,47,0,0,113,32,1,0,0,0,114,115,5,60,0,0,115,34,1,0,0,0,116,117,
        5,62,0,0,117,36,1,0,0,0,118,119,5,60,0,0,119,120,5,61,0,0,120,38,
        1,0,0,0,121,122,5,62,0,0,122,123,5,61,0,0,123,40,1,0,0,0,124,125,
        5,43,0,0,125,126,5,43,0,0,126,42,1,0,0,0,127,128,5,45,0,0,128,129,
        5,45,0,0,129,44,1,0,0,0,130,131,5,61,0,0,131,132,5,61,0,0,132,46,
        1,0,0,0,133,134,5,33,0,0,134,135,5,61,0,0,135,48,1,0,0,0,136,137,
        5,59,0,0,137,50,1,0,0,0,138,139,5,109,0,0,139,140,5,111,0,0,140,
        141,5,115,0,0,141,142,5,116,0,0,142,143,5,114,0,0,143,144,5,97,0,
        0,144,145,5,114,0,0,145,52,1,0,0,0,146,148,7,3,0,0,147,146,1,0,0,
        0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,
        0,151,152,6,26,0,0,152,54,1,0,0,0,6,0,58,64,70,76,149,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMERO = 1
    VARIABLE = 2
    DECIMAL = 3
    ASIGNACION = 4
    IF = 5
    ELSE = 6
    WHILE = 7
    FOR = 8
    PARENTESIS_INICIAL = 9
    PARENTESIS_FINAL = 10
    LLAVES_INICIAL = 11
    LLAVES_FINAL = 12
    MAS = 13
    MENOS = 14
    MULTIPLICACION = 15
    DIVISION = 16
    MENOR_QUE = 17
    MAYOR_QUE = 18
    MENOR_IGUAL_QUE = 19
    MAYOR_IGUAL_QUE = 20
    MASMAS = 21
    MENOSMENOS = 22
    IGUAL = 23
    DIFERENTE = 24
    PUNTO_Y_COMA = 25
    MOSTRAR = 26
    SIN_ESPACIO = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'if'", "'else'", "'while'", "'for'", "'('", "')'", "'{'", 
            "'}'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", 
            "'++'", "'--'", "'=='", "'!='", "';'", "'mostrar'" ]

    symbolicNames = [ "<INVALID>",
            "NUMERO", "VARIABLE", "DECIMAL", "ASIGNACION", "IF", "ELSE", 
            "WHILE", "FOR", "PARENTESIS_INICIAL", "PARENTESIS_FINAL", "LLAVES_INICIAL", 
            "LLAVES_FINAL", "MAS", "MENOS", "MULTIPLICACION", "DIVISION", 
            "MENOR_QUE", "MAYOR_QUE", "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", 
            "MASMAS", "MENOSMENOS", "IGUAL", "DIFERENTE", "PUNTO_Y_COMA", 
            "MOSTRAR", "SIN_ESPACIO" ]

    ruleNames = [ "NUMERO", "VARIABLE", "DECIMAL", "ASIGNACION", "IF", "ELSE", 
                  "WHILE", "FOR", "PARENTESIS_INICIAL", "PARENTESIS_FINAL", 
                  "LLAVES_INICIAL", "LLAVES_FINAL", "MAS", "MENOS", "MULTIPLICACION", 
                  "DIVISION", "MENOR_QUE", "MAYOR_QUE", "MENOR_IGUAL_QUE", 
                  "MAYOR_IGUAL_QUE", "MASMAS", "MENOSMENOS", "IGUAL", "DIFERENTE", 
                  "PUNTO_Y_COMA", "MOSTRAR", "SIN_ESPACIO" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


